DROP TABLE IF EXISTS T_RATING;
DROP TABLE IF EXISTS T_ASSESSMENT;
DROP TABLE IF EXISTS T_AUTHOR_COURSE;
DROP TABLE IF EXISTS T_COURSE;
DROP TABLE IF EXISTS T_AUTHOR;

-- Author Table
CREATE TABLE T_AUTHOR (
    ID INT PRIMARY KEY AUTO_INCREMENT,
    NAME VARCHAR(10) NOT NULL,
    EMAIL VARCHAR(80) NOT NULL UNIQUE,
    BIRTH_DATE DATE NOT NULL
);

-- Course Table
CREATE TABLE T_COURSE (
    ID INT PRIMARY KEY AUTO_INCREMENT,
    NAME VARCHAR(50) NOT NULL,
    DESCRIPTION VARCHAR(100) NOT NULL,
    CREDIT INT NOT NULL
);

-- Join Table for Many-to-Many (Author <-> Course)
CREATE TABLE T_AUTHOR_COURSE (
    AUTHOR_ID INT NOT NULL,
    COURSE_ID INT NOT NULL,
    PRIMARY KEY (AUTHOR_ID, COURSE_ID),
    FOREIGN KEY (AUTHOR_ID) REFERENCES T_AUTHOR(ID),
    FOREIGN KEY (COURSE_ID) REFERENCES T_COURSE(ID)
);

-- Assessment Table
CREATE TABLE T_ASSESSMENT (
    ID INT PRIMARY KEY AUTO_INCREMENT,
    CONTENT VARCHAR(100),
    COURSE_ID INT,
    FOREIGN KEY (COURSE_ID) REFERENCES T_COURSE(ID)
);

-- Rating Table
CREATE TABLE T_RATING (
    ID INT PRIMARY KEY AUTO_INCREMENT,
    NUMBER DECIMAL(2,1) NOT NULL,
    COURSE_ID INT,
    FOREIGN KEY (COURSE_ID) REFERENCES T_COURSE(ID) ON DELETE CASCADE
);
